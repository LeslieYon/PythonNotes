#字符串使用单引号或双引号包围
#若字符串自身包含双引号或单引号，可以使用 \ 转义
print("Hello, i\'m \"Mike\"")

#转义符号 \ 用法与C语言相同
print("a\nb\tc")

#使用 r'字符串' 或 r"字符串" 表示该字符串中 \ 失去转义符号含义
print(r"abc\t\n\\") #输出为 abc\t\n\\

#使用 ''' 或 """ 表示代码中的换行符即代表字符串中的换行符
print("""a
b
c""")

#布尔类型 True False
#单独作为关键字 也可以是表达式的返回值 也可以作为表达式组成元素
True
1+8>10 #结果为 False

#逻辑运算 and or not
True or False

#位运算符 & | ^ ~
#与、或、异或、非

#空值 None 特殊值，代表什么也没有 

#变量类型隐式声明
a = 1 # a为整数
b = 'abcdef' # b 为字符串
c = True # c 为布尔值
#动态类型：变量的类型可以改变
d = '123' # d为字符串
d = 123 # d的类型变更为整数
print(d)

#赋值语句默认为值拷贝类型的复制
e = "abc"
f = e # 复制了一份新的"abc"给变量f
f = "def"
print(e) # 结果仍然为 abc ，f的改变不影响e的值

#python没有常量类型，通常使用大写的变量名表示常量
#注意：语言本身并没有机制确保大写变量名的常量性，注意防止意外修改
PI = 3.1415926 #代表我们认为PI是一个常量

# / 表示精确除法，运算结果为浮点数 
# // 表示整数除法，运算结果为整数
print(1/3) #结果为0.3333333333333333
print(1//3) #结果为0
print(1.0//3) #结果为0.0 此处遵循类型精度升级

#取模运算 %
print(2%3) #结果为2

#字符编码
ord('A') #用于获取单个字符的编码
chr(25991) #用于获取字符编码对应的字符
#字符串(str)类型默认编码为unicode
print("\u4e2d\u6587") #可以使用\u方式表示宽字节字符

#网络传输类型通常为ascii或utf-8，转换方式如下
print("中文".encode("utf-8")) #宽字节转换为utf-8
print('123456'.encode("ascii")) #英文字符转换为ascii
#b'字符串'表示该对象为字节形式
print(b'123456') #英文字符的ascii形式也可以这样表示
#使用decode可以将字节流转换为字符串形式
print(b"123".decode("ascii"))
print(b"123\xe4\xb8\xad\xe6\x96\x87".decode("utf-8"))
#decode可以使用 errors="ignore" 忽略解码错误
print(b"\xe4\xb8\xad\xff".decode("utf-8",errors="ignore"))

#len函数：获取字符串字符个数或者字节流的字节个数
print(len("你好123")) #结果为5
print(len(b"123\xe4\xb8\xad\xe6\x96\x87")) #结果为9

'''
Linux的python识别前缀
#!/usr/bin/env python3
py文件编码识别前缀标志
# -*- coding: utf-8 -*-
'''

#格式化字符串用法
print("你好%s" % "小明")
#有多个元素时需要使用括号
print("我今年%d岁了，我的编号是%06x，我的成绩是%09.2f" % (18,9999,175.2211952))
#两个百分号则使转义，表示一个普通的%
print("%%dhaha%d"%(998)) #结果为 %dhaha998
#也可以使用format函数进行字符串格式化
g = "你好，{0}，我的成绩是{1:08.2f}".format("小亮",92.123456789)
print(g) #输出为 你好，小亮，我的成绩是00092.12

#list类型
h = ["111","222","333"]
#可以直接输出
print(h) #结果为 ['111', '222', '333']
#可以用len函数获取元素个数
print(len(h)) #结果为 3
#可以使用下标访问元素
print(h[2]) #结果为 333
#可以使用负号反转下标
print(h[-2]) #结果为 222
#可以向后追加元素
h.append("444") #h变为 ['111', '222', '333', '444']
#可以向指定下标之前插入元素（所有之后的元素向后移动）
h.insert(3,"333.5") #h变为 ['111', '222', '333', '333.5', '444']
#可以删除指定下标的元素
h.pop(3) #h变为 ['111', '222', '333', '444']
h.pop() #h变为 ['111', '222', '333']
#可以替换某个位置的元素
h[1]="222.5" #h变为 ['111', '222.5', '333'].
#list内元素的类型可以不同
h.append(998) #h变为 ['111', '222.5', '333', 998]
#list的元素也可以是list
h.append(["001","002"]) #h变为 ['111', '222.5', '333', 998, ['001', '002']]
print(h[-1][0]) #输出为 001

#tuple类型
#此类型相当于常量数组，初始化之后不能进行修改
g = (1,2,3,4,5,6,7,8,9)
# g.insert(2,2.5) #错误的用法，tuple不能被修改
#注意：定义只有一个元素的tuple时，注意需要加一个逗号
i = (8,) #i是一个tuple
j = (8) #j是一个整数
#tuple中存储的list元素（存储为地址）可以被修改
k = (["a","c","d"],2)
k[0][1] = "b"
print(k) #结果为 (['a', 'b', 'd'], 2)